name: Build Excel from JSON

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl

      - name: Make Excel files from JSON
        run: |
          python - << 'PY'
          import json, re, os, sys
          from pathlib import Path
          import pandas as pd

          base = Path("docs/data")
          base.mkdir(parents=True, exist_ok=True)

          def load_json(path):
              if not path.exists():
                  return None
              with path.open("r", encoding="utf-8") as f:
                  return json.load(f)

          def pick(obj, keys):
              # поддержка вложенного ключа вида "attrs.title"
              for k in keys:
                  cur = obj
                  ok = True
                  for part in k.split("."):
                      if isinstance(cur, dict) and part in cur and cur[part] not in ("", None):
                          cur = cur[part]
                      else:
                          ok = False; break
                  if ok and cur not in ("", None):
                      return cur
              return ""

          def to_int(x):
              try:
                  return int(float(str(x).replace(",", ".").strip()))
              except Exception:
                  return 0

          def parse_size_from_text(s):
              if not s: return ("","","")
              m = re.search(r"(\d{3})\s*/\s*(\d{2})[^0-9]*R?\s*([0-9]{2})", str(s), re.I)
              return (m.group(1), m.group(2), m.group(3)) if m else ("","","")

          # load mapping
          mapping_path = base / "mapping.json"
          if mapping_path.exists():
              mapping = json.loads(mapping_path.read_text("utf-8"))
          else:
              mapping = {"product":{}, "offer":{}}

          # ------------- PRODUCTS (master.json) -------------
          master = load_json(base / "master.json")
          products_rows = []
          if master is not None:
              items = master if isinstance(master, list) else (
                  master.get("items") or master.get("data") or []
              )
              for it in items:
                  code   = pick(it, mapping["product"].get("code", []))
                  brand  = pick(it, mapping["product"].get("brand", []))
                  model  = pick(it, mapping["product"].get("model", []))
                  width  = pick(it, mapping["product"].get("width", []))
                  height = pick(it, mapping["product"].get("height", []))
                  diam   = pick(it, mapping["product"].get("diameter", []))
                  if not (width and height and diam):
                      w,h,d = parse_size_from_text(pick(it, mapping["product"].get("size_text", [])))
                      width  = width or w
                      height = height or h
                      diam   = diam or d
                  season = pick(it, mapping["product"].get("season", []))
                  country= pick(it, mapping["product"].get("country", []))
                  image  = pick(it, mapping["product"].get("image", []))
                  products_rows.append({
                      "code": code, "brand": brand, "model": model,
                      "width": width, "height": height, "diameter": diam,
                      "season": season, "country": country, "image": image
                  })
          products_df = pd.DataFrame(products_rows)

          # ------------- OFFERS (inventory.json) -------------
          inventory = load_json(base / "inventory.json")
          offers_rows = []
          if inventory is not None:
              if isinstance(inventory, dict) and not isinstance(inventory.get("items"), list):
                  iterator = []
                  for k,v in inventory.items():
                      if isinstance(v, list):
                          iterator.append({"code": k, "offers": v})
                  inventory = iterator

              entries = inventory if isinstance(inventory, list) else (inventory.get("items") or [])
              for rec in entries:
                  code = pick(rec, mapping["offer"].get("code", []))
                  offers = None
                  for key in ("offers","suppliers","proposals"):
                      if isinstance(rec.get(key), list):
                          offers = rec[key]; break
                  if offers is None and any(pick(rec, mapping["offer"].get(k, [])) for k in ("supplier","city","qty")):
                      offers = [rec]  # формат: одна запись = один оффер

                  if not offers:
                      continue

                  for s in offers:
                      row = {
                          "code":        code,
                          "supplier":    pick(s, mapping["offer"].get("supplier", [])),
                          "city":        pick(s, mapping["offer"].get("city", [])),
                          "warehouse":   pick(s, mapping["offer"].get("warehouse", [])),
                          "qty":         to_int(pick(s, mapping["offer"].get("qty", []))),
                          "price":       float(pick(s, mapping["offer"].get("price", [])) or 0),
                          "retail":      float(pick(s, mapping["offer"].get("retail", [])) or 0),
                          "rrc":         float(pick(s, mapping["offer"].get("rrc", [])) or 0),
                          "mic":         float(pick(s, mapping["offer"].get("mic", [])) or 0),
                          "year":        pick(s, mapping["offer"].get("year", [])),
                          "updated":     pick(s, mapping["offer"].get("updated", [])),
                          "vendor_code": pick(s, mapping["offer"].get("vendor_code", [])),
                          "service_code":pick(s, mapping["offer"].get("service_code", [])),
                          "delivery":    pick(s, mapping["offer"].get("delivery", [])),
                      }
                      offers_rows.append(row)

          offers_df = pd.DataFrame(offers_rows)

          # ------------- SAVE -------------
          out_master_xlsx = base / "master.xlsx"
          out_inventory_xlsx = base / "inventory.xlsx"
          out_offers_joined_xlsx = base / "offers_joined.xlsx"

          if not products_df.empty:
              with pd.ExcelWriter(out_master_xlsx, engine="openpyxl") as xl:
                  products_df.to_excel(xl, index=False, sheet_name="products")

          if not offers_df.empty:
              with pd.ExcelWriter(out_inventory_xlsx, engine="openpyxl") as xl:
                  offers_df.to_excel(xl, index=False, sheet_name="offers")

          # join offers with product attributes
          if not offers_df.empty and not products_df.empty and "code" in products_df and "code" in offers_df:
              joined = offers_df.merge(products_df, on="code", how="left")
              with pd.ExcelWriter(out_offers_joined_xlsx, engine="openpyxl") as xl:
                  joined.to_excel(xl, index=False, sheet_name="offers+product")

          print("done")
          PY

      - name: Commit Excel to repo
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/data/*.xlsx || true
          git commit -m "build: Excel from JSON" || echo "no changes"
          git push || true
