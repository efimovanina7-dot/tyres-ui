name: Build Excel from JSON

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl

      - name: Make Excel files from JSON
        run: |
          python - << 'PY'
          import json, re
          from pathlib import Path
          import pandas as pd

          base = Path("docs/data")
          base.mkdir(parents=True, exist_ok=True)

          def load_json(p):
            if not p.exists(): return None
            return json.loads(p.read_text("utf-8"))

          def pick(obj, keys):
            for k in keys:
              cur = obj
              ok=True
              for part in k.split("."):
                if isinstance(cur, dict) and part in cur and cur[part] not in ("", None):
                  cur = cur[part]
                else:
                  ok=False; break
              if ok and cur not in ("", None): return cur
            return ""

          def to_int(x):
            try: return int(float(str(x).replace(",", ".").strip()))
            except: return 0

          def parse_size(s):
            if not s: return ("","","")
            m=re.search(r"(\d{3})\s*/\s*(\d{2})[^0-9]*R?\s*([0-9]{2})",str(s),re.I)
            return (m.group(1),m.group(2),m.group(3)) if m else ("","","")

          # mapping
          mapping = load_json(base/"mapping.json") or {"product":{}, "offer":{}}

          # master.json
          master = load_json(base/"master.json")
          m_items = []
          if master is not None:
            items = master if isinstance(master, list) else (master.get("items") or master.get("data") or [])
            for it in items:
              code   = pick(it, mapping["product"].get("code", []))
              brand  = pick(it, mapping["product"].get("brand", []))
              model  = pick(it, mapping["product"].get("model", []))
              width  = pick(it, mapping["product"].get("width", []))
              height = pick(it, mapping["product"].get("height", []))
              diam   = pick(it, mapping["product"].get("diameter", []))
              if not (width and height and diam):
                w,h,d = parse_size(pick(it, mapping["product"].get("size_text", [])))
                width=width or w; height=height or h; diam=diam or d
              season = pick(it, mapping["product"].get("season", []))
              country= pick(it, mapping["product"].get("country", []))
              image  = pick(it, mapping["product"].get("image", []))
              m_items.append({"code":code,"brand":brand,"model":model,"width":width,"height":height,"diameter":diam,"season":season,"country":country,"image":image})
          m_df = pd.DataFrame(m_items)
          print(f"[master] rows={len(m_df)}")

          # inventory.json
          inv = load_json(base/"inventory.json")
          # допускаем форматы: список объектов / объект {code: [offers]}
          if isinstance(inv, dict) and not isinstance(inv.get("items"), list):
            tmp=[]
            for k,v in inv.items():
              if isinstance(v,list):
                tmp.append({"code":k,"offers":v})
            inv = tmp
          entries = inv if isinstance(inv,list) else (inv.get("items") if isinstance(inv,dict) else [])
          o_rows=[]
          if entries:
            for rec in entries:
              code = pick(rec, mapping["offer"].get("code", []))
              offers = None
              for key in ("offers","suppliers","proposals"):
                if isinstance(rec.get(key), list):
                  offers = rec[key]; break
              if offers is None and any(pick(rec, mapping["offer"].get(k, [])) for k in ("supplier","city","qty")):
                offers = [rec]
              if not offers: continue
              for s in offers:
                o_rows.append({
                  "code":        code,
                  "supplier":    pick(s, mapping["offer"].get("supplier", [])),
                  "city":        pick(s, mapping["offer"].get("city", [])),
                  "warehouse":   pick(s, mapping["offer"].get("warehouse", [])),
                  "qty":         to_int(pick(s, mapping["offer"].get("qty", []))),
                  "price":       float(pick(s, mapping["offer"].get("price", [])) or 0),
                  "retail":      float(pick(s, mapping["offer"].get("retail", [])) or 0),
                  "rrc":         float(pick(s, mapping["offer"].get("rrc", [])) or 0),
                  "mic":         float(pick(s, mapping["offer"].get("mic", [])) or 0),
                  "year":        pick(s, mapping["offer"].get("year", [])),
                  "updated":     pick(s, mapping["offer"].get("updated", [])),
                  "vendor_code": pick(s, mapping["offer"].get("vendor_code", [])),
                  "service_code":pick(s, mapping["offer"].get("service_code", [])),
                  "delivery":    pick(s, mapping["offer"].get("delivery", [])),
                })
          o_df = pd.DataFrame(o_rows)
          print(f"[offers] rows={len(o_df)}")

          # save all three (даже если пустые — для удобства)
          (base/"master.xlsx").unlink(missing_ok=True)
          (base/"inventory.xlsx").unlink(missing_ok=True)
          (base/"offers_joined.xlsx").unlink(missing_ok=True)

          with pd.ExcelWriter(base/"master.xlsx", engine="openpyxl") as xl:
            (m_df if not m_df.empty else pd.DataFrame(columns=["code","brand","model","width","height","diameter","season","country","image"])) \
              .to_excel(xl, index=False, sheet_name="products")

          with pd.ExcelWriter(base/"inventory.xlsx", engine="openpyxl") as xl:
            (o_df if not o_df.empty else pd.DataFrame(columns=["code","supplier","city","warehouse","qty","price","retail","rrc","mic","year","updated","vendor_code","service_code","delivery"])) \
              .to_excel(xl, index=False, sheet_name="offers")

          with pd.ExcelWriter(base/"offers_joined.xlsx", engine="openpyxl") as xl:
            if not o_df.empty and not m_df.empty:
              joined = o_df.merge(m_df, on="code", how="left")
            else:
              joined = pd.DataFrame(columns=list((o_df.columns if not o_df.empty else []) ) + ["brand","model","width","height","diameter","season","country","image"])
            joined.to_excel(xl, index=False, sheet_name="offers+product")

          print("done")
          PY

      - name: Commit Excel to repo
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/data/*.xlsx || true
          git commit -m "build: Excel from JSON" || echo "no changes"
          git push || true
